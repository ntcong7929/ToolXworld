import base64
from cryptography.fernet import Fernet
from datetime import datetime as dt

def deobfuscate_key(obfuscated: str) -> bytes:
    return base64.b64decode(obfuscated)[::-1]

def main():
    try:
        key = deobfuscate_key('PU0yWk9rR2h2V0U1OXZpb0JTMHFiX3M3b200VnlpeVZhS2RzVDROaWVOLWY=')
        fernet = Fernet(key)
        encrypted_data = base64.b64decode('Z0FBQUFBQm9Xbzk4SEpoRDJVSUZCYlZobERvQlY0RHB0b2xsNTk5dEg4Z283dUNVd2ppWXVKWkpzQjF5YjlMODllU3pqTWlMY0E4M0puRlE4ckt6NWhVUlR4Y0piSEE1UzNGQmNqdmo2UEl5aU8ydE0zcXozZXp6eHJMQUk5WEVScTVWc1hTVW45RDMtU001ZGNGWld3a3ZGSUU2SUZOWTMxT1cxWlVfaUw5VU9rWERiOUtNd21KNDVuTTBoNWcxaV9paFdnSnFxaVFyRU11cldVQUt6ME5yUmdPakhfQW5fN2NtYWlJZXJTTlprYXNzWGpHY2wtbGptbjNkYmphUDJzYkZpd01NRWU1TG94QkZXMzBqWUppaXRzS1FZWHlFY3ZORkVpallNVzVxd1NnVkRVMkd4S2lvUWwxZVUtbkpPWFZKN1FXZHZVLW9xR1FhTFZCbFd6SnV2T29KRm5JMlB6ZF9QTC1lb09rNkgyb3ZXbG40eDJyeEM5bzJlUjNmOXUtOTI5Tk54SlktTG1RbE5YX2JsWUFwZ0o2ZEJhQll3VWdqZV94Zmh4dFIxUEJLRURqWXNnM19xTEpzWWNWYURvSWpNNGdzUkoxaWpmT0M1Q21zNVdCOE9pcHdmTTFDWFlqVWlHSEZxWVQ4V2xIM0ZBMkVkellncVQ1T0RfWnNTbkY0cEtPTjc0bkNETlVGbGVSYTJqWW04RE9NWVEwSnFYdjdlbUNaX05uRDA3THNBaTNtMEVsd0NIYVo4Wk1EZHQ1bWp5Z1VUXzAyZkU0T3NEWk4xUWxBdGNYRDQ1bmxnbUtoRGJTSG5id1lnWGJzbjJmOGlkY1ByZl9Jd2FaTjFVa3MyM2xiNExZTVczS0oyeUtEV3JiVkRLUWhBUW5DcEtBeDdMbTBDM0RNVUg4WEx0N0RqOXdFdnRCWnRWcW4xN3g0UG52UERVal9STHRGOWNQRkFFNS15THF2NU1KYlZVYTU0b2diamdBUjVRNFZtM1RLX2RSVXZNeUxUNWY0ZUZvbW1LaEJNcFF1cXNHRzlGYVE2LWNhSHBsNzZGbzVLN21IQ3hrYTM2YkdsZzY3c0k0RnhQSzBrMVVxci0wQk5kSExQYjZMQ1pwdlZ2WTREb09PelFkdGhfbXJhai0xMG4wNHdRemRfUmZOWVBVeHNYVUVPbUlDT05EV2hVSndwdmV2NGZqRll5TF91bW5ZZjViNzJnblVnUkRVa2JZOGR1SFV3MHJ1QTZkWG5sbHc5US10YTBvYndMWTMyMGNMbzZxQ3IwQ3JRYWxEQjc3YjkybFRqaWJaMlk5RG13UWtSR0t3dy1vQndsdnZ0TmFaTGU2ZWFoTkROLTJRYkQxc2dDeVRBUDJ3MWFkcXd1cDhnaGptc2pDUlBSNGkxQnlqTGlXcmxLWTNSREJEcjcyU2ZDb2xrdDdlNWs0UGRGa0pWRUpQbDBzS0JvZjV0aUptdXl2X1pyRzg4U0x1ZzlWcDc4LTZWN1BvRW9DN2N6QThGZDhXLVpzXy1UWE9zLXlNZXhiNk5USHl3M1lKWlNCZ1VhU0dIQVUtSG04M3JMN3dNdUhvQjVMZGZ4Q0IxZloxVVdUZXMzRlR0eVhVdTIxZlJMV3c5RmlXMzBqY2FUTEdjaEVLdzNNRnUxaGhhSEpkdEdlVXk4YWtfTjJSVHg3NWZFMnJRRU9pMUd0MjJ0cWdDUzVYXzg3dWdnUE1GbHdUVlVBQjJwWXBsazllaFBxN2p6WE85bmh5b0hnQ3VPaERwdWZzV1NQSnRUbWlzZHM4aXNjdlh4OWNDWnZxNmwtRU1pMlBlVko1cGt1WDFnYzhnRFVJbFpPNFBiQTFVNjFXTHRWd202QjE1UmdyZGVubUpoZVBoTDlSMldZdUxmYkt2cEtNTDdhZlJYaGZsOUlaejNzNWsyM25pRUt4VENYdS1mZl80SVdCdExNYml4YlBzTm04SzZqckNpMWxIT1FKdG5YVmlYQ1hRR04wdF9nc3dnR19NX2U1MkgxajZMNlh2ZjJqQXhtUkEtZlZVSUNaeGRrci1qQzVJaUxHT2pQZ0JnRW1hSFlmU2pLanFsanozcVRLR09IVFZBeUxxX0t1WExNbHZ6V1QxZGdla0dHYy1TV0xZb1pmVkE1c254ekpYeFV3c1lhRHlxOGZlQ1RhbC1zUXVfRjd4R1BwSk5ick1JR3pSaTl6ZElQZHVEOEJEc1MtZ181TTAtX3o0Qko4NjEtS1lLLVZ5ZTJSYjBTakwwV2FzMldkcXMtM2Vzbms3aTBuQTRPcFFaYkg5Vm91SGs0V09jVENpSERXNU55Qy1ZZy1GNHJfNzhiT0RiY2xKWWlQR3BKOXJpb01OdzRvb3FSTllhdkViTVBJandFT1AxdUJoY2J0S3gxVk1ac3J5MGRiclJkT0ZkR2MzZGtHcUlQVXNNSXcxWlpPcVFVQmRyRXdlOGFuNk1VSFlvNFpRUGVoeTVwVjVoeGZGeUFxRzdRR0xkWXd2WG1Rc2Y0QlVGbm02Z2ZHczFWZ3JPQmNqcXBJMWdONy1aeVg4YncyR0FEcmtJdFlVVWRQQVQxWEtEOVplX3J4VDFtTG83aHI0eUpWNTQ5U2pDaElPMFlmRHRfSU1NaFVFWlpFSGI5Z19BXzlEWTZFWC1NaEF5T0hJMnFUUGpjSFpJT0loQlpQbWdVeUZrSDlBcXZOeURBVnJjNnhrZl9tRXY1N1BabldYbGNnRHJ0LV83ckxsZXBkWkprYjdvMkZrWm5GZ0FxTFVKQjRsMmo4N1g3SS1PRFZkd3UwdTFPaXJMTkYtODZlVzBSMFh2M2M4Zlk1bzNjaFpZWl9RQmtwbndiWFlNX0VxMjRmRFZCRUVISGc4OTVYb2d0cDZBa01POXgtSEVtdU1EWGVnOXFPbmxJZE1remRVanB5U0R3b0FsMkxWc0VfZ0JBLTJQdXEtU0p3bU9EU1pBNGxKZEF3cGdQM05hMkwzbERibjlNaVFOVVZzbUwtcFlfMFBCbUdVRXQ3ME8xdjJSaUI5TzUyeFoxeFBka2pZMzVNLTg4NDI0RjRUbTNLaXpMd01feWR6QktVUkJ0NWg5X0owNE9RQ1RVUjh1bzR2QzU1WTBuTzN3LS1BU0l4QV9KZjZzS2JTX0FrWVBMTWtUS2wySGhaNE5IeUp2dzl5RW9SejYtdHF2dmZ4eWNwWkViVTlmODFZRHlDaEQ4c0VYN2dCUGx0QkFzV0cxVVFobWNRTXB4N05TUjhkcXhXendVYk9EQnUtM1NLajdza3lvNEJZbk5uRmNOVDJhWnhFRXItLXNsdTl5SUptdW5sYlBYUFFWYUtSZEJkRU1mNHUtZ09xcVFJZ2tReWdCeTdnelZzTDVvRFIzNjRTMnpwUThIbWJmRXcxdExiS0pNMS1ZMlA4eE4xdjBfMEEzdVp3OVV0TlhSQm9SU1dCYjZlVlRDeFBTU0t0R01HVWRQbGNlWVlYbHJpRktlelNQakNuUFJRUzd4di05TVE5OWxzNW1PRkJaeUtsbThnZThyQWlkdzFTRnlZcUNiQ0dTUUF3TUV5Q0diM1prTVpwVmw0VXBjZ2RCYmNPVEZwbTRESlo0RE5rQUJtN09DREhsbElkb1hFQWRqaHkwbFdvanctcml1Rmh4MlJ0bFRGZzI0ajZEUmRaZ3NGMWJ3ek4tb0F3TmZJZ1JIa1dwcEhQcDZoOTJKZk9fSmM3ejJ5VlhCczRYVk1WVF9wYjRaOGZVT0V6MjFOZGRkRHl6MjF2VUE5XzZyWmZmcGduYmFnZlA0Z09FZ25Ca1Y5aUg4cXplY0hZZlIwcHg3QjljWVRfMjNYcDRzVWI1NDBDeFl3bHIyTmJFMFZibnl3Z3ItYlJKdm1VYW9lT0p4OTBQaXl6ZFVYS1JhVnVrRDAtNkt0M0RfbkdlTjVST29pTy1vNFhTaFk0V2w5ZUJCLUZvOHJTS0p0U0hadk9MXzJ5U0JRNDVmZ3hPTHh0alZGLWNFQUI1SGY5ZXNiMUhQczhwdXV3ckFKYmt3MVNES2dYaHdwTW5GU2l1eFJ1QlQyLXZIQ2tpWXJTVUkyYjZxSnZ2ZWNSWWZFeEJIOTIwX3k4NnVtVjFUV21ob0VHMFFsSVlCUDlnRHBpNHR0UzFMcU94Z2RpWGotd2xSZzltY1Z2SmFIUmtDUnp2MW1pa20zOFlkSnNqa2Y4QkxPVFFnUU5CbDFlaFpBQkR5YVpMem5EeXZEM29iVWwzcVA0dlMtNWsxbllZTHpfdEFIVms2Z01rNW5FRUNqb2d3dUVuODJBYmttbThXRHZ2Q242NGpLLTl6UHJxRFNkYUl4RGR5S250ejA2cnVCT0JOckxrLVZVUlNocUNuUm1JYW5KRHVRZUFleWd6MEhnYjFCdFV0bGUyLTVibE1xTWhKeURiUmxHd0FwNUVaQ0hfWUh3R3FmX2pTN2lFS3ZKNS1fbGlnb3Z6Z253UVlzOFhXUmNkN3kyYjNmaTNwRDdpOVZDNGlPRGZ4Nk5tVTlBa21kSTlwa1B0M2xHdWVoY0ZwRDhkRjFJSEJuWjVRQ0hLcFNydERkeE5jdmlrNHVjZnZlb0cxdDVVSnJzU1BPQk9IR2tDenBzRUZEUmZhN0Y2dzVVLWtkZi1lTExoMzd0VnQ1ZVpVaUY0dFRmSWJLRE94bzdDSUhySEFhX3lyZjVsWVM2c251SlRtTFJQNTRJeHdJeG41aWdVb0xhczl0SXdmNGd2S0U4VFp2RjdkZ2hVYkxRZlU4dUhxd1c3OVpxQ2pTUXh1LUwtRGxTeUpuX3VrN1l2UUlnWkFPU1hXZklzaW9TaXpqb3VuLWtaT1UtWUZGOGJMZGVYOWZiSElORE5yTFM4UV9BUWRMUmEzTmRmTEFKZDZMZmt6UGlNVWEweUJ1SkduS0lJbDJYSTFCTDNuS0JrVFhqeUxrd2FUUHdjRGJDa2hVYUZYaXVWY0JPRFhOS2ZnZHJZMDJMeUVvVm5FQV9PaDhqa2tsNmpWMXNpcnhrbmdMMDVCcEtxTDRKemh6OXZWLTMxa1hVT2pUakhWUjNMOFY0c0d5Y0dtMXdtUWRIaGJaLUt2VG1KN3NqX2hqak9OMGJFTGVTTEpyTnppRmxYUS13WmQzdUNuMGJoeEVsTGljS25PaXg5MUs2dnJnY0tkN283Q3M5eTQ4V2RDb25vaEI4Y0dTeGF1STRPTjJjQ0dfZHBSUy1WaTkzamhOWWtNQWVmdHR2YThMbVpuWi1HSnVYNlA1S243NkdpYXFQcTdBNWY1azVkblpZVEpLZFdWb0dfbU9ZaThyNElTNk1sb3FKUkpwNEVzMElHbjczZ0JWSEVWYVVyd1FYRExlZFlFTklra2J0aDFLUTlCdEozOEdsVHVRRlVFYUpKLXh3ZEhpcl9NNGlJLWQ0cjVpSWQxWUtHYkdrUjNnS0ZUVmNUamFZZndEWDVJOGFQSDdJUmxFMVFaRFJEVGtzQWNJNFpKaHZDOXdSQjlxTGtkWjVseFdVM2RucFRLbTJzX3BUMEVUalhoTEk3azM1bUdVZERwcy1QalQzTUxvTE13VFBZQzNyQ0dWUE5HdWdDSk5iU2EwNGtnbDZOZjZFLWVsT2UxMmwteEJuTUozVUFadHF6Y3Qta3JGLU95OXEzTXNmVnlZMmtTMmtxZzFTcXlPOVVrQXo4Y2taVVdWMWU4MF9WZnpvOUVXUlZnT1hrUWpVLXBLT1JuZTFaZWZ2VERlMk04WnJCbTJhMGdvb2drUHhLeDJPRWJQYzNPMUZDVzJtWVM0dDBrS1dDbmFpTWpma0ZYZGpSQXhfYjlqcGpySjQwNWhFTXU1cURDSjBBNTh0RzhuZGk5c3Y3X2g5TGJXWmtMaVM5QUhJT01GTDEwVmFXNzVJVWc1eDZjVnpoUUphVEpMTVRHbnUzSnpsV29JQ1diLUZyMHdvSm5XTnlEV3F3dllwVnlJUUtHQ1YxR3gxYmI0S1BrTGJDUVphdU10ZENUUWpWdHlnTXAydElRUGJRak9vNm9OYmQySmJPeVowZDF1Mml1ZE4yaXBRY3JjRkUyN1RJNjdxV1JGdkMyTjdjQVJUVUtSWWRPaWJ0UXlLWmVIUUxpTFFQVE9yN1VMcHJPR0JsUUZ2a3F3QjVTSnlnbGVKcDNjdUtCUE52am1oZ19KYTlRU08zbE9YMmNPSmZsdmhJeW00QzRYVnVFc3VLaldFRElXRnFtQkpQX29SQ3FuMmxSUTBHUUhWYWtRXzJya0J3R0M3ajNJbThhdENnTXR4OWFPdTE5amE4N1FxY0daSFhnU3NTYmZOMi1pc2wwd0Rjc0U5cExDSzlvWG5kVXB1bEhKVGp1YmhuVDR5cER5QlY5Mmxic29JUER0cUNOUGpVVEd5RldhNk5lWkxEU2RET3phcWxYSTNWSzZMSE5xejBpMWpHQ2xkOFpUMEl3QjdMVVRuOXY2dGFPQzluRjRyTjJCODRBQjZzTWhiUXhSNXhqX1RiWHloTkdEeHZoTE1FYUJiTjZzaFhXWXNtdkdOdFdJaEQ1OENnWE9BNm8yajhiOHVFOHduNHcyYWVHcklTcGlodUV2cVRDb29ia3NVX3VsOGdUZTN0ZTZraTdpRmdEUVhRb05qUXVId0luTEFQUHQxYW10N29qQkR4cGpWMnFWZGlJNVRWeGhLU04zbXNyeDk3V1lwdXFDbks0amgtUGpMaXdUc2dMOWJ1N0U4bzM2enBZajRoWjliYS01SW5JTkxXbVd4TmM2WEV6ajgtdEVINWUyR2ZuNEp4UlNoT3dCQW1Tc1otemNCdDA2Q1FFU0l2ZWFDRlRiQlRldlFmS2RXaDgta3ZCemlOMGxCd0IxRWo0VUFjSjc2NWg2eDBOUTZUSFhYYzRUdEdKS3ZESWJnZUxZNEtNMjhaOU1rblU3c00yM2l3a0U0ekxic0Zwby1ROGVYNlhDbzRGSUpVbFhPQ0RBRDJfNjhUSzc1SEYzYzR5TWowazZZNV9qNG1EWm4xN2lwZUtEX1gwcmVlemc4MzlMNE0tcGhNTDQ5QkgxX29GQnVEZ3pHV1ZpS3dvRG8wdVZsTmdxWUIyLWRTQ2ZSWHBtQW10c0g4SHRtODkwX19PUG1Cd1pBZlNteEkzdDF0NFZHVERGZmZBNkRGWWZQVkFSWnc2YVljelVhaUZXVE4tZzRQMnBkaWJQVldpdHhHYU9fQVc3MkxVSUZ6akNPTjljYkVDa18yRFpVd3RlaE5tT0YwSlg2dTZKNjJ5LWl3UzVUenZ6M3lORE05RVd4ay1RR0VSWGpRNzdhTVdmN21mcDBqcVdHSkRQMUUyem9TUWtfdTZCekZMQTBTazlubnhnOXJDYUVka0hseGpac0FhNG1OLVhQUU4xU0tJLThBQm1HRHhkYzF6NjNVbDh1dkthMElJVTdldl9LZW94VDV2b3BPSVExMGhQQS1xMThmMTg2UW5nVkRXQ1NQQWJ5X0lsREVHTWNLX1BTNVBuNl9UVFh5SlpHNHhBQVV4NEZ6c01qajFJSGtGWUhGaktWNjBvQUxydXN0RGN0T1ZyMzVyTmc1MG9jdnpxSUFMVnNTOW5TYkRPZTlZcmMwYmxaRTdkOEh0cTFpTEkzVFpJcDIweXp3QUs1ZVlnbUI5ZlRDZElQazhQX3QwLVVoVjdRemN1T1UzOXMyOHJQV2F4aldya0FiUUU0SXdvZ0ZIWHVlaC1iRGJ5QjV0amRyb3B0YzN2djhFbTQwX1BWRzNFd25ha1loMVRuWHpCTnowbEF6RG1BLTNhcF84Xy1lbjVRZWkxQzRyMjBibjd0TW81OHhHcWFhWXlnUlJfVEF1OXJVazRPN3RhMmhTczlEaFdaeFJ3SFZibW5sMkFGU2JneVowMzQ1OW1GbWN1VFoxVVhsSF9rU2F2d0N2MzVxOGVpRnNuLVB2Ukk2UURXT0pXSU1VM0d0MkVDSVlES2Y5Z0lwRldmNDBMT0xPejEtUVNQdWZGY3ZsZDFiUXRraURHRG5EN1FFVTNocGF1Z1ZjMV96MGszSmxKNTd2UXQydnJqRWs0Qm9DdEtOdmtQUjNmcXpKVVR1cUZmSmg0ek9NWEsySHR3ZGZDdWRBNEZ1c0dhNTU0Q0xaS0czRHQ3V3VONk83RURwQ0E0bTBNYy1MNkNjSHFiWVpDblhZT0ZZMklXVVU0d2lsNkFxb3lnZFJVSGhvbVJPVEQ2RWVoVURLTXFpQVcxNUJ1YkdqNko4TTBmQW1SZ3lvaTlEY24wVC1XakRya2RzVDdMVHhxQ1NLTGI1ZU9qNXdSVlI0b3VFbm9xRVd3LTNORGdrb2xnUGRlREtUUG90OGFnMTVyQV90WWxnbktLMVpLMDdSUU0wOFJ1MGlwVURWOFg3bHpkVFVLYWlOX2w1bEpzR2xSOHBRRk1jdUszOUJfRjMzTmxNM1lSWC1zRk04X1Z2VnQwWDBIMC1ZRl9qMGVqb3VsQlJZV1ROTFloSnIyTjhFR244RC03RFZzMlkwcUgwNV8zdG5SNnIwZzdkSWZPdEhLV2Q3NHJZN29nX2FPZk91Q0RtYTA2blhVSFE5blZHYVZseFlSTUJQbUlNakI2LWUwX0FGVU9jV2JmY3VGd29oY2VhTVhQZWdMRWM0YzNNMDVCQUtjdG1PMnBiY2NVNG12RzF0TkhaM3JJUmpPalZzTzNRTjU4UHNtZ3poMjMzam1zYzRFLVRZR2IyRmpuZVpqVnJMLXhlM3lNRHZ3aHNXQmhHT2wweWR0NTh6MDA0NEFDQlMtUFNGclVRVGF6cjBROFdkdV9RbVJ2ajlTcjZNSzZ3VnIyaUt3aTdHVUZoZFZOUWxKdnpLRzV4U0RTbDlubVdDRWV6VXZxclZaR0dwVXdUcW44bTk0OUUtWFZxbWhZckdOa1JrZWEtaWtCd1daYUxrOE1ENlR2bW93cTZjNW1GS29mYXFwRE1wb3pUd3pKZ3l6dl9qRDh5NGRSMm96TzlVaV9EWFk4ejNnR3pBeHZRYmp1b2dsdVJiQTBxRzNxQWN4YTVyZUZEVGh4cjFrcmVkc0h3eDBNZXhaN3d6SHJrbmNYSEdZUHNFTVdmb1pZYUxlZmJBN3B1cW5zTVM5VHlfRWtWYmZ1VllFb3N4d3R4Z2xKYlFaR3A0YzhMQ0FCQzVnSzY2MXc1MHpVQ3JVYThXUnM4N0UxeV9iVW9lWDlWUGNmdm1GVFV2eWQ2X0tKMkVHRXViQURhNE95TXJTMDlaLUdNVDVPWHEtcmIzQjRMdFJPVzRpSUV0akd3OU9KTm5USG0yVFRXdXBOeFZwVTJoWjVEb0p2aXBTd05EanhXRGZJSUlyNWsxT0h0QnI1NTgtLVVZX0I0YUVYWm9YUFk2VkxfNUNwcS0zRzdXeVZORGt6ZTJMaE5vc0xyNlhlQ1ZHRWc2X3I2RnNNb2o1d3pfU1lKZGsxcVdOZ1JRWDNCWG56SzdKVXNJWjRNZlFiRVVmMi1Od0l6RXNCUVZfNHZteXp0NFE2NVNiX3pMLTJGQVVkM0R0WHZkOHpvUDdQdXE2ZnBFc25EclNGS01mOUJLYXlzXzNMYXAzUzFJcVBlSWExdjVNLUFydTlXVVZiYWVpUDZJY08xTnQxOS1seVczaFJnM0liaVpTaW9xbEJ6YUxneXdnUUNWcGJ2NDgyNkFQRGFRVHVNS194ZXJkNlZqa1N6Wmp0RmlfZ1hPVmphSUN6dXNrMlJhWVRJeWw5dXY4SlZUbENRUm5hd0RiRjA2RFB5TXpOOW5mbjI1aUduWDdTbElwa0lXSU1ETHdaZ2dOTnMtemhIa0pFVVNLSXdfQ2lKRExpdFZIaDN0V3RSLTVqdGVvdEFCcEktTnlzeEZJd1A0WGY4NWd4LVQzNk5mN282bXVWc19PdTBXaGJtX3c5ZkMtTHFYbWZsYlZLemtFX0o4NkhsOWkwQ0U5ZkgtZkQ4OVdsNTdfLXpBVDZJYm5EV0xtNDM1UmpZTjRiOGFUZG5hajlfRUh6WE5rbjVMemlpWUJBUkNDdExqSkw4aU91WXpoUnhONDEyTnNEWDh5cXA1akNDMGpfampha2xzN3p1ajZONlVXd1BPTzlNRnRTQ1NQSk1JNkYwaHFjRmxNa2lRNTB3cmszbnNlVk5hZGxCbDBUcjN5ZE5yeWVseUNLRk5UODZmXzRXOERWcG15LUxzTUhkRk9ndWtnbWh1VHVMMm1uQS02RlduOVBYVUM3U2xKX3hWekNIUE5hNXU3ZEFtcllwNjAtVlhVRThkM1pWcjZqaEgwcjVjZnhYZVNaaGJpWUVVaW1BQUFHZGlFbVlzN1EyQ1ZzVm5ueG9RODNMZmgzUXR5MWhTc0tlMHlIcW1yMVlrdF9DZ1ZSYU9ORllXQ0FHcEZRSThVWnU2XzRMOFV6UnVkQVo4X0hURjgyZlR5MWlZYkg3UjYydUpLR0hIaHVRdzFhN3dyUm51c2xlQmp3cl9qX3l2b1NIZG1Rb2dPVklTaEIxMEptbG5Nbnp2ajE1QUxadVZkVVRwNnp1MEd0dlFFRG1PNG9ZYWt1SkdCZHV0bkNMSXJWX1c0cFEzcFZHdncwbHMyYWVFdXppNTQwTHNUWk5hSDVabmlPbjA2ZHNzVXlKbF9iUjh5UG1jSFhrdUZiRW9UZ1Z0MDhfb3ZpaW9pcmRTMWtJTDBROWlIRDhQRnZwQWF3QVdRTUJmM0JJTEtiWGVyMklhNXNyUTVWaTJUOG1aWjN0TUlwcEZPM3ZIV1ZXYy1lNDRFSjItUGhYQzJtZGpnOW5ubTdiTXNsZkxuejdSOTJNSTJKajQ5WERHZXFLNmF2UDBmTmRtWmt0VmZKc19CNTh5Vl92ZkNpS2FjSFE4X29Kb2Mta2xqdndUc242dGxkb0o5VkhHdlNlTnRmbEZLRVRIZjVwTTB5YkU4VGFFMGtpZ2VYRi1FZ2lYMEFaTDdvSklNcnFDMVNqM09Sd0ZJMXAwUDQ5S0ZOSHVLWV96SjRMYzI3UjhLM1I0T1BpOFFqLXBaclNDZzcweFlWdUo0QXpxcEZUTnRSVkE2VlEzNmVVMUhXM2tZVVo5eWt3OTdieFoxb05ZRl9BQk92WU5OM1dHeU0zX3F3UmpQQ3JwUnRIS2xjcTJzSmdmSkRsNVFQaHdxNVhFUE9YMWdFZlQwNktOdWJuQ21fTXVXdUoyTEdUU2k0MGo5VUZIejY1UENWWkhSWDdwXzY5Q3VJWjJacnc1bFlJNk9yN0JfT3FIUjJnSmNYTmJ1d1V3MmN0TDVtLVZNdm1tTERGWk9tNUYza0Z2bVN5VFhYVGRpTnI5V2RGSS1ZMDZBMEhKQ0twYlFnb0dSR1BqaTM4aFRLb0E2NnFUdW9wXzRSTURYb2dBSE14Rk10WGpWbWxib3M1SFBZUHBhaldrVHlqclRNQnVrZjJ2WkpXLVNoUWlVU0ZQY0lpRV9aNllvZnViQmxUOFFpR2l0YnlNWU5nNHVyTnFXa19zS1pJZDYtVFp4dVB2M0FBeUZsZnBQWEIwQmEteDJwZlRPd0dudC1SZEN6TGthdWxhR2xucHVKWEk3Z1RXRjRoSWIxQ1dMOVBpcTd5d3Q1elJ0dnNRaVZobFVLeHFlWkg3Znl0VGhCSWVaMXY4QnMzdEVOSmlESlRVbC0tbGd3MnhxTTdJdVVYeFVUT2JhWktOT2xsVi00alFMWDJVUnR1Y01yM0VvTTB3NmNETzAtbVdhSFJUSWNIZllPX3dfVnZORHRuUWhJQk54SWVpbTZvRlBMcGtjMTBpVXRneGRIbFVSUmExd3RCc21SaVhETmVqRHZPTktPWWZGY1hsUHBWOWxoeHcxNXJXVzlxVkwwZGhvb2JTYmZMZ2JBR2dBZVNBekdCR1hOZXRXR1ZsNFNieUVlV040S0RydG5lZ3pOSG1XbWJpaHlLbVUtcjBHT0k5ZEptdVM5b3FVN3h4V3R2NHQ0UDdrbmZmbmtzMm1HWWVjNGF5VlNPR2t0MGtfd0NNT2IxSElLSjdjbTJINGlQbGdCYjNzZVQzcUYtMzJiZWFHaFU5UXRHY0pOWVF2dWxnX0pRVm93V3Myc0lHb3dBU05BUk13NFQyOVV6UjRZM01HZERYQ016eC1JV2t0NktqV2RQb1pLSnFyazhJWUFHblBrWWZOU2todFZLTldTUE12SnEwc1BwUXBfMmJRX0ROZzlia0JWVWRjaFJVYVh1ckx3OUJLVmFEbTMxX2REWFptaXQ4WkVGN0V0Y21wSXFhYTVlRlFDand3bmVLWC1UZHo5QWFoeXBIbnhjUW5FWjVzQTRMeldLZEM1aGZ2a0pmb2lWUll1TFFIRlowb0NTLXNHdVBZMkFrZnBBWVE4Q3N4Nm92ejV1dG1aa2dVVENOR0pyWXA4Q1FsZVVJSzQ1dVhUMmtMREF3bUZoN0V6aHNYMlA3dXRQNmV3R2R0bEt5SWdIVVFzM0tGWE1KbmdvYXctVE1xLTZONzd6VWRPTjBGeDZtaklkdFd1T1FleFB4b25JUGRFeWlnWUdhQllsa0dfNzRtbFNHbmpIS05rWFB1THhzVXhjTXNhdU1xYjAtNGtfQVdkTV9LOWhmb2FNME9lLXhzYXZ1WkJ5amVwM1UydFI2MEJvVGdLbkFwNFBQcmRTdFpLdThQeVRvZUxaX2NIaHlPbXBDWFM0YU9DdlhBT1B5Q2gtZ0JFTEdNRzRkckh3Uzlpd0M1czk1bm94ZlUxcHFBa2g0cXY3ZVdENk1pQ1hydlg4WlpvMU8yenZNdFk4SnEzTXBVVVhJOWVlVkdVMnZOa2w1a2tlM3AxWUlqZWdaQWN5ZHVhX2JRZDVmQ0loQUlRbTIyR1o3N1ZRYklaQkVyTS1yRFZtUVdQVXZSUzE4Y3QyYUNHdWd6ekFlY1liTVBjT2otWWFaSjJxNHpoNnlVdXpDeU5sQWc5RmZCV1RBLS1yQ1dleG9OM1UzUjlwX3loWEFRT0NGN2lhTGprcm1CbklQSGtGaHJ5a2F4YlloOHBiX0JzeUQ0S3RkRmRLblZLOUxYNmg1d2xFOXRKRTloV1VzUzZMd1NqcHhIelo5QVlHeTk0OTV6MEJmeW9PWUhJd2NuQVJIWHM5b0lnUGJBRXljZ1I2d2tnSFNFQ19Rb05iMWhoazRZS2l4TjVGN3lta0dKQzJWNWVKVk1IWnBzdS1kaV80Z2JVcENKUFFEajc3TGtNakhKWnkwX0JSOWhELVFYM3B3OElxQ2dxY1dMcnlYUjBwSW5LTkJrdmxFQkU3SXZsMklhY3JmZV85bnFROEU3OTdUYkZ5aEROYlpmR21fLTh5WWRlWnM2Yy1Gc28zbXU1RjZCdGtfTzNqZDVwMnM4T2xoRkhfNmRFTkRQN0xWUVhvWmpWUzBvbHN1amlNOVJvTkc3czE2SE9FazRNck5nSzJpQmx5SUNxLVZ5aTNFV3d0VEFVb25MckI1MzllNzdhVlZHdVEwMUZGRjJiUW5hMWhKeHYyN1h3S0xTUUdrTDlqbXRucEQ2TlNSTHNBOVRoSHZoY2hqUVNKUk5TRDFYSThFOVRGNllUMEYxSHhGOFhfTm5pNXZhN2lfQ0VybV9kbkNxc0RhWFU2ZnlieXktb2xub3V6aTZfV0lJd0FpUkxqaVNUd1ZvbmRsMjduMnpRVU9jNEJUekdKZElnQlh6XzRETUdlS0k1cXJoUEh5YkpLZjlVYVU0S1VPU2ZtWE5aNTVrRkdSdnlUZ29YNWJZMURUQ3RyaW1xVlNfQVJNbGNBWXN0MDNYcjM1aFZ4WVZncWhxOWhaY3RFSHBTNFU4M2xSWW5kclpqT3Fad2lFanoyN3p0MC1ORUpMOFJreEtJOHBHY29wZWV2YVU4NVprTWhwVnhmVXJMNzg2MjJCWGFxVHhRbjdQZ0FLVjJiNjlsRmZhWDJsQkpTeHF2VWZiLWI4X3FKX1QxaUFnZ0U5ckI4UDBNR3N0SlFtUjZZTkFKbGJNN3RUamQ0bGx3Y3hvdHh0dTNacEZuTmVsLWlscEYzaUtJaHBFUkJUVWEtb1BMMmRWVDV5bVZHTXlKTURldWxaU2MyRWZMQkhMRWVWd3kyWWtscEg2c0hkUVIwZ09oNzhodHJrRHlSNVRxOGFEYURHWTRYNHVxMGM5c0g3ZUpsX2xTQzJOdW84RzhQSjJZcGN4UUdUNHphZzc3T2NKR1JHR1V3WEFFWENkZjh3RGl6aDBqVllTMVpnTklacnJ1M0QxeEZudnZiUmFjRFdUSGx1UzBmTjl1R3E1ZGFYdnV0ajJJWGw2ajF2ZnU4ME9kT20wMWdzdDIzaXdENEpUakc2X0FKV0NjNFJvbjdVY3ZPNTNQT0VkZXNYdXNwNDZnaEdnbVh0NkFjeEtudkdRdVlGVDJSeng2b2w4U1hyUDllZDc3UFB3YWQtVFMwUVdzV1FrcEhveUFBSExfbzc3eExDMmhPVUdpeFJ2ME9vVF82Y3FZQlRuZ0NJN1RONGllNXRmdFFBRnZ5ZzRzT0JUdGptUnBzbV8zYnliU2ZrOGtRNzNQY2R5clM5a3Z3Rmw1VjVVcnM4N0syRXp5MHQzeXRfMzlSU2haOERROU92eTFOazdaUUVzeHVLZlpsaUVCdDFpQ3d5WExHUWxxYU9wZ29tQk9lQUNSczNWbndwOXltT0dIWl9vZ0plcHl0bzJ1VlA1VUlGTDhGYTFkSTQzbU50d0ZWTERxbHhLY29HZERyMEVSa3B2UjRpNnZ0V2MzUU1tWU9iQjE2MVBxWmhOaDRJWUtTZ1VNVVlER3R2UlhMbFQ1R3liUHpENnQ5MHBmR3ZXa0FYN2xsRTREcmZGT2tjQ1l1bnNqbzNtczQtMUJ1Rk16T3Zndml0ZFVFTkEtV0doQ3BoeEVKTVRXWC1sc2dCY0Zmc1NjcmxtcGROanBPM0lGUllubmQ2d3NQaVFyWTdJd2xPV1pDSFozWHlFQnMxUkFHOUt5YmZIV1Z1V1RMak5IT3NraUo4dFpyNlA2QjhkSmdOcy1BdF9FU3BvcjhUWXJOVzZvVTB6UnZiTEJlMS05Z0xZckt0Ri05WFNkT0pyMTBENlREN1dOeWNoTC1JRDhuSjFudVlib1Z6QmhoZkl5U1otY3Qtd2VvTXRtaW1Yb3dCS2RDZmN4RXQzd3l1b01qS2hpWUNFQWc0QW9CQkVwTk5Fa0E1V2lhaEtPb1g3NkhvUGJoYjNmUlNZZ1JLSUpBR2VYeklQTXdHQ3VfZklaLVMyN2tqQ3M0bmUwd2lRUTRlSzZZd3I1dmtVR19WVDNFUmZPRmFFNWlOYllUVjBKeDNYVHAxREhRUUdLNHNfVUlGRWxwZzFrTkpzaGZyV1hRb2tac2RXeWp4NGgwVmI2YTZGcFFJNndEUVBGQ0NYZjlycnVyQUVRc3pjTGZOS3BPV092VGlaVDdWMjJqUlFnQTlaWjBpeW5YZ01nMnV1aTBpVmxaU0NQX2pZZUlvR0luc1NtbGgzaVJJTFRuVG9Bd0I2ZHVjRzBCRE84QllodXJHY2VKVUdqend3d2o4R3ctUWxDSmNBd21hN1Nndk1TckgxNlZBM1pUM09ybHlaem53X1NVRUlPYWFKTW9qcHNUUnBJWTNpZFozZFl6ZnNneGZHczIyQVh2bnFlTE5TN3laTVEyNlNva0VBeGlOOGNiZUluUXJSemtJQXUwRlZkaGJIOFVTS1d6b3BtRDhwcUxKeVF5Y0lGb05xSWlXTXFnYUJUdk02UXJIVVMzMGl4Q0x1YkdWeGJsX09yaDBYM3dwdXVlcDlIdnFZMmoxMEUwVlhUQmpZZWc5RTZqV0ZnT2poLUlVRHdxYWFBdk5mU3Ztb3BFSWhCYzRFMXRFSWVtVDd0d3ZnOTZkNXVLSzI5Qlc2dzJ1WUl3NEUyaHVTOENYYzNoR2g5TDRlYkJSbFdIdWhHYjY3c2JMNWNqZ2NXVmlDQ2pFR1d5Z1ZFUG1xWE9tTVc0X0hrZFZQT1o5UTBzZXFpS3JCOGtlNmh3UmdmLTY2OU1HblVvLTR2NlNNNlZZcW9yZVRXMmdZUW9ocWlnM1l3amtrZnRrQUN6Sl9UQ3llem1NNWg1RURhbkFLbmJRSm0xOUd6RFJaZXpETml6ejNDZ2ZoZjNrTFNjQ2hQbG1yYUlPdUVxaXBweEtPRUVCUHRudlV1YzY0VkhUOXhVU2RxUnhhSk81a3NEcEhlbnRkM0k0Rk5JRVlMME5aMFVzSS00Nmc1MmtpMnUyWHBSbGxOdG1VeFRvUW1FWkhVQ0JSRVBKM0NqZEJXOUc3TG5MQktROEFGRjJFNWVDRmZjT1V0NFlVbzN1aTdoLUk5UDdBcGJWVmE5SXJrMy1OTkM2bVp3cXhJdU1ZRzVfcW5BREFtMDVWYl9ScHpVUXc1bWEzN0FFWnUxbG1ieE8zcUdpU0ZHbzJRY0d0VkxSV0NjUkZJUmgxVGpTbThiU2t0R09zZnFQRlRiZldab2tlMklVU2hhaGVHUkU1cFFzeWRGVjN1czdlSmxxeVFoU3FmU2h0aWpXVVh3eHRiYkV4R3Q2WS1BczVEZFVQYWRrVy1ycWtPX3VfYmNDUW1xWmg4Um1hb0diRGROMXN6WF9DTzAyZ2hDYWZsQlJrQWtXVVRVenU0Q1o1T3dwSEFLa3FzbEM3SjBnckppZFJUelhSRDItZDZzczE3YXh6ZkVXb0kzLVFKSGhabVh3eXlsVmk5cHlCZndpQUJLVk5nb2wzMlpNVEY2OXN2dWhETTZyZE5uNFQwOWpGdVVPVTc1SzB2cmhXbXBjaV9CdGJTeGw4b3VEbm9BNUJDejR1WXNTUG5GSVN1eFdVVzdkNEVtVmQ0MFNoOWJKYXlhUkFPVVRZd1RRMDJHdjQtclNnMDdKSEctZXAzWHN0UXhfMUlyc2ozVzJUU3FmaGZhaUV3NXRDdFkyZXZFLW1XcDRhU0JqM0dNUzZXeXpfbkxLQld5akU1SDdlU2MtMnVBWVVvQTg2SFF6bmpnYlBQWnNvUUxrRGs5ejZyNURXQ3YxMy1VU2FQS0l1SVJiVFB2ODdJZ0QwWkJQSlhHclo4bE16OTJheVU5eVJjTk9YUTNhRzRuVmJZR1Q3STVPbExrRFY3THR2Qm5jNkNFVGFHOGNQLUZxVXJWdHpaMFRXWFhlT0xZMGY2ZEZfekhvN1lrMTV1bFV6YWRIM09ha3hhV3lscWpJWi1CMGY3VU1QMFdqY08weHAxRDNjVktrMmNMd0tEWEk1enZwYjk1V29mcHlWSENXa2xtWE15WGtsazB0blBzNW45bkE4VDhaX1hOMlUtUDUtMjVhZEtIMUNOUjJMVWc3Yy1BZTJBOHNjUVNONzB4ei1wTmpvVDJZMi1xSkEzWlVjYUtpaE5lLXd2T3dqdnI2eWdIaGdzLXFxRlNwYl93NGs3VE5hYjJuMlh5dXFsbzZEeUttYnQ3SjNzeVk4cDhuVEV1UDVvbEtYRHctUkdhU2ZNUjdEQnduMjJWWlVENFgwUzFTMVJBTXplUW9EMU1vVnRVeTFsSk15amZtWHUxVU1nQjRfWGVPampvU0Y3TkZCTV9mQlpWT3QwdFdURzBfVm5mMUJYZ1VQWHhpRGY0NnNoLXhtZndwa2YtMGp0di1BUFQzT3hLYlB4c3EwNU1IZzhwT1pBQk1JYVIxYkRPSzZBX1A5dUl0R1M5ZkZvS05OdE5GdTBGWnMya2pmWm90c2NITTVHdi1yVFViWTdmNGsxSmRJSTJiWHc5NzVCVy16VmFGZWZPMWM4M0p3VEVzT21OVjV2ZXJrREFYeTZKaVMzbVlXa1RUTnZYTE8wV200eE1yZkd5dmdldFViWk1EdG1CZXlCbUthRHRLZW1Kc3lyelZZc2tacTB1NTVTYVRlc0dOYkNtaU1GbU5rUW8wNDY3X3ZxdGpJVEY5SXRBc282S3pKcmlzZ09lODFHV0tnWF9EeTgyNHR4QnlMLVpRN0o5MXpnYXZxdlhUYTg0SGszT1l5NlJ1ZEhDblUxRkZkWnZRRWZWTDFreENuNk9OTkc3Vl9nVjdNU0xjY3pkQWtTSEVlQjRRV3k3akdBVTc3eDk1dGk0cERuWVhpY2JCSF9SdzRJSDJEWkRFdlNrWWdXbjlmSjRpUW1kNllSNzA3TDZnN0lhYUpHSDdXdVpIaUYwR3RjWkg5bmQxSEQ4UlJNMFRadzJoU1pEUXdWWkdqTTRKYmlTNlJyY2FuUjlMQTlLdFpzWHc3cXBsclZaalY1ajN1UzFBbWNqMjFPLTRXYkVJdkdfWWpyNmRoQ0phOXBHREJpLWdHcWNNemdJQkh3bUcwU19Td3hKTmFxVklKU1NvMjEycE5KTlZpbkpZaXIxUHdhUlZtZXZCS25iaTN2UVNHeXhrdktTbWRtbHpkYkFyZlhRalF4dnZnRWd3M1hvQzhPeUtBU2hZbG1LUnFrUUFsYm5Nd2pLSUI5Zk5RczU4UFJmRDMyd1ZuUTE1YzJ4UG9XWW9SdzVMMTlZR3RNUjRqMlZnQW5NbTFlRW9FZ0xFSXZtMlE1Z1lHazRQeGVoUDlVXzA3SC1DNlVCQTdxdFhuWHpoYUk4a1o3OG5iZ3Z3NGh5TXNJeW5wZFZjVU5JUUxUaXk5NkdzVU5PaEswd0hudWRZX3JXLVM1MFB4WmkyRlc1NmN6amg1NlF0X0JjZVlCeXhFMkpYcXE1TktlR0EtWjhQRTBPcjl6dzFuSktZUVZVYWZQc0RlaWozVm5xVWUwc2xGb2wxTU5Lc05zVWUyaUI2bURndFlfVXpXbTljdHo1eURXMG5STGF4dGdjem85UlBQMVF2QWxEaWtHVzF6cC1FbTgxLXdRS3hVSDFONGc3eVR1aGdZdG5VMmpuU0R0d0xGYzZVbVFzUlBHTG1RQnFUQWpMY3FMVEltR2liRDFzZHYxMG5RNV9td2dlZWlpUGZUVzBhcDl3aldsR1poYzI0ay1WN0ZFWVRNbzBLRFhjcl9HbUkzdHI4dGJOamRtR1FJVXVneXM3QVh0SHRYbXdTMTFnUXZycjNzLVRkNnVBLWhrcmFsZ1o4bE1VNXFuV2RxUE5IbThOOTNkNE9FMGFBcnVma0tzWm93c2R2eEhVbU1xajl4TGZjemk1NWpCS2RPZnJLNVlTYnB5UURnanVkWXNxcXRhXzVKTXYzakpwY0RodUVybkN0OHIta0g4c3R3SEFkaWpOTTFval9MM1VhemthcTVNdXE3NnNGRnZIQVkyT0hvYnFaZlktZTRheFk3SnhOVEJCMmZaWUljaVd1cms2Y0VSWFA5NV9rVmdndkhSUG45YjBoVW50VzFJcUVFZ2tZalJrd2pCRjNadDFrOU1CNGwzY0xQc1FGSlEweU9lNjdzUEp5Vmlyb1A2OVJMZGFGMi1QSmlqU2Qyajhxb01IQUZnRWhsc3lJdzhhSV9fMHJhYjVMcG5Eckx6S0gtWW5CYUg2VXdRVTZyREFfV0F3eEpQTW5UREtjRXAwRXQzU1pLWm1JZzVzd2xsLXZDaVAxZG1KXzRwM3BTdlVUc3VFSXRvVi1razlOZjVZZTZ5S3BkMXZOalZnaDdiN09iMGhfSXZ0STAtbzE3bEs1LTUtMVl5d1R5OFFPREtsXzlSX2Z5YlpoMWpEUjRTN1hvV2d4VHJhY3ZPUEFvTWt0Y3k2cndQQUtOT19HeDNJS1NkejBTOEstUEFCNTZqMkhmMk9VbXpSRnQ1Z0tkWVdMX0lzNXh3X0N5cVdHaVdpdFgzdGdTbU1QQi1PMVEyVVdSVDF1R0NHM3VONl9OMm4tRzVUVHpsLUFqTFFkME9jUEhLYTFQWXRTZHp4MGZhT1BqeUw3Nlh3bGdRLTFpWjcySkY0dkRSQTFxTGFfRjNPQk05MU50X0dYUG9BRVdFU1JDVmtOZ2JXd0c5azVNYmpEQ3NFTHlCLThRQ2dRaF9aVkJqekMxX2pYaGtLZjlLZWRFdXF0SVRkZEdnZUpnS2czaDEwYmktXzcweE9XdnlrTW1kcUJhenh1NGtMMDBmMGR3ZTQxLUw4bXVzci1CXzRqSk01RThLUkhUT1Vta2NvS3BBREluMnJCMF9wWUxaRXpDMFRnNXN2WGpHWndKdzJDMmVXblJlM3NBc3pwMFdtLV82Z29sZXBMSzV3eXBLTmhOalQ0SGVmNk9jRFNKa2FWbWg5OWJCR0NpYThYXzhmTktmSVVMMXo5dWM2dldDa3FVcUFVUGxVWms3VkkzSkxJSWxhNUVsZFMyTnRIOWdURzE3Q3lNTmtoQ0UwZUN4T0N6X21EeGotTExJZG90d3FEVHQyWnU5SlZmdjQ4dWFBUDctRkRWS3daRnlYRS1fYV9Ib1pzQVdFZ2FWRC1ES1E3bkNiVHlQMk90U09tSlpqREpNSWxUUy01dXN6cEc5VXVCUUYyMmtCY05jU1RzTmdDMDd4ZHZNcDEybDdjTnJpMUJnc3gyd3FyVU5NRl9naEZZMFF6ZGpjcUNRX1RqS194d0tneHZtLXVBa1ZsUkJqYWxyWWpqQzF1WkZOajBSbGtzVWtkdFdHNFBfaUY3UTNhc2N6MENXdlplY3JiMk9fajB6MHUwSTc0ZU43Uk9vTHkwVjI5UWF2Q08tWm5TcXNjRTdsdW5ncl90cGphMVJ0ajJjaWhvMU9CMzkxaDRiSjRIVGJpVF9PMmVZNkl3cFNMY25xUWVkRUFGTDJwUVBnTzRiNnplenJjZFB6UDRyNGNFbWpuaUQ0YS1lN3BfSUJsWmNIVFdwQXJJNk9KQUZBaXhRRUs5YW4xbEFLcFFuMVc1dUZvU1N2cTBHQVhPeThuWVh5QWJHMEJ5b05NTUxjU1d5Q3ZtLVprYWFNMnB5NFRsTUZ2Z3BQOG5jclN1cTJ1RWxCSUpvNGZSdjMtR3JqOW9MWWx0SEJENkItZWVud0d3bDZBUVdsaE1zX2lLendyUlFUb3RXUHJuazVzbEMzQVdhM05DUXYyT0VGajBZNVIxekp0MXYyUWVRM3ZNZ2JKTm9CLXdTTlJvUExoNGtsLWZNbDNpTzRORkIteHozSFk2QkROUVpfYi0wUVhocGpZdUZlTFk2bHNMWVVxNlNpTDJ6bXdoX0txbVAyc1JqMTNjSHQ4RVNFNTZnakNmTlhxYmxoUlUtYUR2UFZtdERqakNsdmh3RjdpMHUtZDZKcTdUbUhTLXFqZFZwTnYxcDV5dUdjbkE3eVhvTUtfdzBDaTA5VTFkU0wtcy1MYUx0Q21RN3J2ZVRTd0xlRFhGRFZKT3hJaUFpSHZ4SHlBdUNOUHpuMl9MYmVTaW9FYlhwb19jR0I1QzFPbXRmWklhc2RMQk1idU9qak9ETVEwZVFvWldEY1dyVDlEN2Z5RHQwa0czbmc9PQ==')
        decrypted_content = fernet.decrypt(encrypted_data)
        exec(decrypted_content.decode('utf-8'), globals())
    except Exception as e:
        print(f"Lỗi khi giải mã hoặc chạy: {str(e)}")

if __name__ == "__main__":
    main()
